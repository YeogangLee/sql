SELECT * FROM CHARGE WHERE TRAIN_CLASS_NO = 'K';

UPDATE charge SET PRICE_NORMAL = 1000 WHERE TRAIN_CLASS_NO = K AND END_STATION = 001 AND START_STATION = 003;


--관리자 기능 - 시간표관리 
--열차번호, 출발시각, 출발역, 도착역 --도착시간 추가?
SELECT *
  FROM LINE_TIME;

--열차번호
SELECT TRAIN_NO
  FROM TRAIN;

--출발시각
SELECT START_TIME
  FROM LINE_TIME;
  
--역이름
SELECT STATION_NAME
  FROM STATION;

--출발역 도착역
SELECT A.STATION_NAME START_STATION, B.STATION_NAME END_STATION
  FROM STATION A, STATION B, LINE_ROUTE C
 WHERE A.STATION_NO = C.START_STATION
   AND B.STATION_NO = C.END_STATION;


SELECT A.TRAIN_NO, B.START_TIME, C.STATION_NAME, D.STATION_NAME
  FROM TRAIN A, LINE_TIME B, STATION C, STATION D, LINE_ROUTE E
  -- 앞에 2개 테이블과 뒤의 3개 테이블이 INNER JOIN 되는 조건이 없을 경우,
  -- CROSS JOIN으로 조건없이 모든 행이 출력된다, 2개 테이블의 실행결과 + 3개 테이블의 실행결과
  -- OUTER JOIN이 어려우면 ...
  -- ANSI 방식 OUTER JOIN을 모든 데이터를 출력해야 하는 곳에 사용하고
  -- 그 외의 테이블들은 INNER JOIN으로 처리하기, 연결할 수 있는 조건들이 있다면.
 WHERE A.TRAIN_NO = B.LINE_NO
   AND C.STATION_NO = E.START_STATION
   AND D.STATION_NO = E.END_STATION
 --  AND A.LINE_NO = E.LINE_NO
   AND B.LINE_NO = E.LINE_NO;

  
--   
SELECT A.LINE_NO, B.STATION_NAME START_STATION, C.STATION_NAME END_STATION, A.STATION_ORDER, A.TIME_ENROUTE
  FROM LINE_ROUTE A, STATION B, STATION C
 WHERE B.STATION_NO = A.START_STATION
   AND C.STATION_NO = A.END_STATION
   AND A.LINE_NO = 'M1351'
 ORDER BY A.STATION_ORDER;
 
-- 열차번호, 출발역, 도착역
SELECT D.TRAIN_NO, B.STATION_NAME START_STATION, C.STATION_NAME END_STATION
  FROM LINE_ROUTE A, STATION B, STATION C, TRAIN D
 WHERE B.STATION_NO = A.START_STATION
   AND C.STATION_NO = A.END_STATION
   AND D.LINE_NO = A.LINE_NO;

-- 이제 출발 시각 들고오기 - 출발시각이 나오긴 하는데, 크로스조인
SELECT D.TRAIN_NO, B.STATION_NAME START_STATION, C.STATION_NAME END_STATION, E.START_TIME
  FROM LINE_ROUTE A, STATION B, STATION C, TRAIN D, LINE_TIME E
 WHERE B.STATION_NO = A.START_STATION
   AND C.STATION_NO = A.END_STATION
   AND D.LINE_NO = A.LINE_NO
   AND E.LINE_NO = A.LINE_NO;
   
SELECT START_TIME
  FROM LINE_TIME;

-- LINE_ROUTE의 TIME_ENROUTE 이용해서 계산
SELECT D.TRAIN_NO, B.STATION_NAME START_STATION, C.STATION_NAME END_STATION,
--       (E.START_TIME + (SELECT TIME_ENROUTE FROM LINE_ROUTE)/24*60)
       --라인루트, 라인타임 조인
       (SELECT START_TIME + (SELECT TIME_ENROUTE FROM LINE_ROUTE)/24*60 FROM LINE_TIME, LINE_ROUTE
       WHERE LINE_TIME.LINE_NO = LINE_ROUTE.LINE_NO)
  FROM LINE_ROUTE A, STATION B, STATION C, TRAIN D, LINE_TIME E
 WHERE B.STATION_NO = A.START_STATION
   AND C.STATION_NO = A.END_STATION
   AND D.LINE_NO = A.LINE_NO
   AND E.LINE_NO = A.LINE_NO; --IN으로 바꿔도 안됨, 나중에 다시 ...

--오라클 날짜 형식 시간 연산하기
--출처: https://gent.tistory.com/244
WITH temptable AS (
    SELECT to_date('2019-08-21 08:00:00', 'yyyy-mm-dd hh24:mi:ss') curtime 
      FROM dual
)

SELECT curtime
     , curtime + 5/24         hour --5시간 더하기 
     , curtime + 5/(24*60)    min  --5분 더하기
     , curtime + 5/(24*60*60) sec  --5초 더하기
  FROM temptable;


--TRAIN, LINE_TIME
SELECT A.TRAIN_NO, B.START_TIME
  FROM TRAIN A, LINE_TIME B
 WHERE A.LINE_NO = B.LINE_NO

--TRAIN, LINE_TIME + STATION 
SELECT A.TRAIN_NO, C.STATION_NAME START_STATION, D.STATION_NAME END_STATION, B.START_TIME
  FROM TRAIN A, LINE_TIME B, STATION C, STATION D, LINE_ROUTE E
 WHERE A.LINE_NO = B.LINE_NO
   AND C.STATION_NO = E.START_STATION
   AND D.STATION_NO = E.END_STATION --;
   AND A.LINE_NO = E.LINE_NO
   --AND E.TIME_ENROUTE IN (B.END_TIME - B.START_TIME);
   
DESC train;
DESC line_time;
DESC station;
DESC line_route;

--LINE_TIME B랑 LINE_ROUTE E랑 잇기
--AND E.TIME_ENROUTE IN (B.END_TIME - B.START_TIME);

SELECT START_TIME, END_TIME
  FROM LINE_TIME;
  
SELECT ROUND((END_TIME - START_TIME) * 24 * 60)
  FROM LINE_TIME;  

SELECT TRUNC((END_TIME - START_TIME) * 24 * 60)
  FROM LINE_TIME;  
  
SELECT TIME_ENROUTE
  FROM LINE_ROUTE;  
  
-- INNER JOIN 
SELECT TIME_ENROUTE
  FROM LINE_ROUTE, LINE_TIME
 WHERE LINE_ROUTE.LINE_NO = LINE_TIME.LINE_NO
   AND TIME_ENROUTE IN (SELECT ROUND((END_TIME - START_TIME) * 24 * 60 FROM LINE_TIME);
-- 또 CROSS JOIN ...
  
SELECT 
  FROM ;  


--서브쿼리 한번에 다 들고와서 X
SELECT TIME_ENROUTE, (SELECT TRUNC((END_TIME - START_TIME) * 24 * 60) FROM LINE_TIME)
  FROM LINE_ROUTE;


SELECT B.START_TIME + E.TIME_ENROUTE, B.END_TIME
  FROM LINE_TIME B, LINE_ROUTE E
 WHERE (B.END_TIME + 5/(24*60) - B.START_TIME) IN E.TIME_ENROUTE;
 
--위에 INNER JOIN 복사
SELECT TIME_ENROUTE, TRUNC((END_TIME - START_TIME) * 24 * 60)
  FROM LINE_ROUTE, LINE_TIME
 WHERE LINE_ROUTE.LINE_NO = LINE_TIME.LINE_NO;
 
 
 
 
 ========================

SELECT *
FROM
(SELECT ROWNUM RN ,START_TIME, END_TIME
FROM LINE_TIME) A , LINE_ROUTE B
WHERE A.RN = B.STATION_ORDER

SELECT *
FROM LINE_TIME

SELECT *
FROM LINE_ROUTE
 

--
SELECT B.START_STATION, A.START_TIME, B.END_STATION, A.END_TIME
FROM
(SELECT ROWNUM RN ,START_TIME, END_TIME
FROM LINE_TIME) A , (SELECT END_STATION, START_STATION, STATION_ORDER FROM LINE_ROUTE) B
WHERE A.RN = B.STATION_ORDER


--역이름부여
SELECT S.STATION_NAME START_STATION, A.START_TIME,  T.STATION_NAME END_STATION, A.END_TIME
FROM
(SELECT ROWNUM RN ,START_TIME, END_TIME
FROM LINE_TIME) A , (SELECT END_STATION, START_STATION, STATION_ORDER FROM LINE_ROUTE) B, STATION S, STATION T, LINE_ROUTE L
WHERE A.RN = B.STATION_ORDER
  --여기까지하면 크로스조인
  AND S.STATION_NO = L.START_STATION
  AND S.STATION_NO = L.END_STATION;
  

--역이름부여 완성 인줄 알았는데 오류
SELECT TRAIN_NO, S.STATION_NAME START_STATION, START_TIME, E.STATION_NAME END_STATION, END_TIME
FROM (SELECT ROWNUM RN ,START_TIME, END_TIME
        FROM LINE_TIME) A,
     (SELECT END_STATION, START_STATION, STATION_ORDER 
        FROM LINE_ROUTE) B,
      STATION S, STATION E, TRAIN
WHERE A.RN = B.STATION_ORDER
  AND S.STATION_NO = B.START_STATION
  AND E.STATION_NO = B.END_STATION;

--출발역 도착역
SELECT A.STATION_NAME START_STATION, B.STATION_NAME END_STATION
  FROM STATION A, STATION B, LINE_ROUTE C
 WHERE A.STATION_NO = C.START_STATION
   AND B.STATION_NO = C.END_STATION;

--열차번호 개수 구하기
SELECT COUNT(TRAIN_NO) FROM TRAIN;

--역이름나오기 수정
SELECT TRAIN_NO, S.STATION_NAME START_STATION, A.START_TIME, E.STATION_NAME END_STATION, A.END_TIME
FROM (SELECT ROWNUM RN ,START_TIME, END_TIME
--        FROM LINE_TIME) A,
        FROM (SELECT START_TIME, END_TIME FROM LINE_TIME WHERE LINE_NO = 'K1117')) A,
     (SELECT END_STATION, START_STATION, STATION_ORDER, LINE_NO
        FROM LINE_ROUTE) B,
      STATION S, STATION E, TRAIN T
WHERE A.RN = B.STATION_ORDER
  AND S.STATION_NO = B.START_STATION
  AND E.STATION_NO = B.END_STATION
  AND T.LINE_NO = B.LINE_NO
  AND TRAIN_NO = 1117
ORDER BY TRAIN_NO;


--ROWNUM 수정해서 1117도 출력
SELECT TRAIN_NO, S.STATION_NAME START_STATION, A.START_TIME, E.STATION_NAME END_STATION, A.END_TIME
FROM (SELECT ROWNUM RN ,START_TIME, END_TIME
        FROM (SELECT START_TIME, END_TIME FROM LINE_TIME WHERE LINE_NO = (SELECT LINE_NO FROM TRAIN WHERE TRAIN_NO = 1117))) A,
     (SELECT END_STATION, START_STATION, STATION_ORDER, LINE_NO
        FROM LINE_ROUTE) B,
      STATION S, STATION E, TRAIN T
WHERE A.RN = B.STATION_ORDER
  AND S.STATION_NO = B.START_STATION
  AND E.STATION_NO = B.END_STATION
  AND T.LINE_NO = B.LINE_NO
  AND TRAIN_NO = 1117
ORDER BY TRAIN_NO;


-- 출발 시간 최소
SELECT MIN(START_TIME)
  FROM LINE_TIME
 WHERE LINE_NO = 'K1117'
 
SELECT MIN(START_TIME)
  FROM LINE_TIME
 WHERE LINE_NO = (SELECT LINE_NO
                    FROM TRAIN
                   WHERE TRAIN_NO = 1117);

SELECT LINE_NO
  FROM TRAIN
 WHERE TRAIN_NO = 1117;

-- 출발 시간 최소값 
SELECT (SELECT MIN(START_TIME) FROM LINE_TIME WHERE LINE_NO = 'K1117') MIN_STIME
FROM dual;

-- 출발 시간 최소값 
SELECT (SELECT MIN(START_TIME) FROM LINE_TIME WHERE LINE_NO = 'K1117') MIN_STIME
FROM dual;



-- 소요 시간 최소값
SELECT ((SELECT MIN(TIME_ENROUTE) AS MIN_TIME FROM LINE_ROUTE WHERE LINE_NO = 'K1117')) ADDED
  FROM dual;

-- 출발 시간 최소 + 소요 시간 최소
SELECT ((SELECT MIN(START_TIME) FROM LINE_TIME WHERE LINE_NO = 'K1117')
        +(SELECT MIN(TIME_ENROUTE) AS MIN_TIME FROM LINE_ROUTE WHERE LINE_NO = 'K1117')/(24*60)) ADDED
        -- 가장 적은 TIME_ENROUTE 소요시간이 아니라, 가장 적은 STATION_ORDER
FROM dual;


-- 가장 적은 STATION_ORDER로 수정
-- 출발 시간 최소 + 역 순서 최소
SELECT ((SELECT MIN(START_TIME) FROM LINE_TIME WHERE LINE_NO = (SELECT LINE_NO
                    FROM TRAIN
                   WHERE TRAIN_NO = 1117))
        +(SELECT TIME_ENROUTE 
            FROM LINE_ROUTE
           WHERE LINE_NO = (SELECT LINE_NO
                    FROM TRAIN
                   WHERE TRAIN_NO = 1117)
             AND STATION_ORDER = (SELECT MIN(STATION_ORDER)
                                    FROM LINE_ROUTE 
                                   WHERE LINE_NO = (SELECT LINE_NO
                    FROM TRAIN
                   WHERE TRAIN_NO = 1117)))/(24*60)) ADDED
FROM dual;


--오라클 날짜 형식 시간 연산하기
--출처: https://gent.tistory.com/244
WITH temptable AS (
    SELECT to_date('2019-08-21 08:00:00', 'yyyy-mm-dd hh24:mi:ss') curtime 
      FROM dual
)

SELECT curtime
     , curtime + 5/24         hour --5시간 더하기 
     , curtime + 5/(24*60)    min  --5분 더하기
     , curtime + 5/(24*60*60) sec  --5초 더하기
  FROM temptable;


-- ROWNUM과 STATION ORDER는 같다
SELECT *
FROM
(SELECT ROWNUM RN ,START_TIME, END_TIME
FROM LINE_TIME) A , LINE_ROUTE B
WHERE A.RN = B.STATION_ORDER

SELECT MAX(STATION_ORDER)
  FROM LINE_ROUTE
 WHERE LINE_NO = 'K1117';
 
SELECT MAX(STATION_ORDER) FROM LINE_ROUTE WHERE LINE_NO = 'K1117';












